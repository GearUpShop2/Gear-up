{"ast":null,"code":"// import React, { createContext, useContext, useState } from 'react';\n\n// const CartContext = createContext();\n\n// export const CartProvider = ({ children }) => {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [itemQuantities, setItemQuantities] = useState({});\n//   const [total, setTotal] = useState();\n\n//   const updateCart = (newCartItems) => {\n//     setCartItems(newCartItems);\n//     // Calculate and update total based on new cart items\n//     const newTotal = newCartItems.reduce(\n//       (acc, item) => acc + parseFloat(item.price) * itemQuantities[item.id],\n//       0\n//     );\n//     setTotal(newTotal.toFixed(2));\n//   };\n\n//   const updateItemQuantities = (newItemQuantities) => {\n//     setItemQuantities(newItemQuantities);\n//     // Calculate and update total based on new item quantities\n//     const newTotal = cartItems.reduce(\n//       (acc, item) => acc + parseFloat(item.price) * newItemQuantities[item.id],\n//       0\n//     );\n//     setTotal(newTotal.toFixed(2));\n//   };\n\n//   return (\n//     <CartContext.Provider value={{ cartItems,setCartItems, itemQuantities,setItemQuantities, total, updateCart, updateItemQuantities }}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export const useCart = () => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// };","map":{"version":3,"names":[],"sources":["C:/Users/Orange/Desktop/Gear-Up/Client/src/context/CartContext.jsx"],"sourcesContent":["// import React, { createContext, useContext, useState } from 'react';\r\n\r\n// const CartContext = createContext();\r\n\r\n// export const CartProvider = ({ children }) => {\r\n//   const [cartItems, setCartItems] = useState([]);\r\n//   const [itemQuantities, setItemQuantities] = useState({});\r\n//   const [total, setTotal] = useState();\r\n\r\n//   const updateCart = (newCartItems) => {\r\n//     setCartItems(newCartItems);\r\n//     // Calculate and update total based on new cart items\r\n//     const newTotal = newCartItems.reduce(\r\n//       (acc, item) => acc + parseFloat(item.price) * itemQuantities[item.id],\r\n//       0\r\n//     );\r\n//     setTotal(newTotal.toFixed(2));\r\n//   };\r\n\r\n//   const updateItemQuantities = (newItemQuantities) => {\r\n//     setItemQuantities(newItemQuantities);\r\n//     // Calculate and update total based on new item quantities\r\n//     const newTotal = cartItems.reduce(\r\n//       (acc, item) => acc + parseFloat(item.price) * newItemQuantities[item.id],\r\n//       0\r\n//     );\r\n//     setTotal(newTotal.toFixed(2));\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider value={{ cartItems,setCartItems, itemQuantities,setItemQuantities, total, updateCart, updateItemQuantities }}>\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useCart = () => {\r\n//   const context = useContext(CartContext);\r\n//   if (!context) {\r\n//     throw new Error('useCart must be used within a CartProvider');\r\n//   }\r\n//   return context;\r\n// };\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}